<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>XUEYINGWEI</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-03-27T13:40:17.604Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>薛英伟</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>前端登录流程</title>
    <link href="http://example.com/2022/03/27/%E5%89%8D%E7%AB%AF%E7%99%BB%E5%BD%95%E6%B5%81%E7%A8%8B/"/>
    <id>http://example.com/2022/03/27/%E5%89%8D%E7%AB%AF%E7%99%BB%E5%BD%95%E6%B5%81%E7%A8%8B/</id>
    <published>2022-03-27T13:37:41.000Z</published>
    <updated>2022-03-27T13:40:17.604Z</updated>
    
    <content type="html"><![CDATA[<p>初次登录的时候，前端调后调的登录接口，发送用户名和密码，后端收到请求，验证用户名和密码，验证成功，就给前端返回一个token，和一个用户信息的值</p><p>前端拿到token，将token储存到Vuex中，然后从Vuex中把token的值存入浏览器Cookies中。把用户信息存到Vuex然后再存储到LocalStroage中,然后跳转到下一个页面</p><p>之后根据后端接口的要求，只要不登录就不能访问的页面需要在前端每次跳转页面师判断Cookies中是否有token，没有就跳转到登录页，有就跳转到相应的页面</p><p>我们应该再每次发送post/get请求的时候应该加入token，常用方法再项目utils/service.js中添加全局拦截器，将token的值放入请求头中 后端判断请求头中有无token，有token，就拿到token并验证token是否过期，在这里过期会返回无效的token然后有个跳回登录页面重新登录并且清除本地用户的信息</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;初次登录的时候，前端调后调的登录接口，发送用户名和密码，后端收到请求，验证用户名和密码，验证成功，就给前端返回一个token，和一个用户信息的值&lt;/p&gt;
&lt;p&gt;前端拿到token，将token储存到Vuex中，然后从Vuex中把token的值存入浏览器Cookies中。把用</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>数组去重</title>
    <link href="http://example.com/2022/03/27/%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D/"/>
    <id>http://example.com/2022/03/27/%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D/</id>
    <published>2022-03-27T13:33:26.000Z</published>
    <updated>2022-03-27T13:36:01.279Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//测试数组</span><br><span class="line">let arr = [1,1,&quot;1&quot;,&quot;1&quot;,true,true,&quot;true&quot;,&#123;&#125;,&#123;&#125;,&quot;&#123;&#125;&quot;,null,null,undefined,undefined]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 方法1</span><br><span class="line">let uniqueOne = Array.from(new Set(arr)) console.log(uniqueOne)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// 方法2</span><br><span class="line">let uniqueTwo = arr =&gt; &#123;</span><br><span class="line">    let map = new Map(); //或者用空对象 let obj = &#123;&#125; 利用对象属性不能重复得特性</span><br><span class="line">    let brr = []</span><br><span class="line">    arr.forEach( item =&gt; &#123;</span><br><span class="line">        if(!map.has(item)) &#123; //如果是对象得话就判断 !obj[item]</span><br><span class="line">            map.set(item,true) //如果是对象得话就obj[item] =true 其他一样</span><br><span class="line">            brr.push(item)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    return brr</span><br><span class="line">&#125;</span><br><span class="line">console.log(uniqueTwo(arr))</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//方法3</span><br><span class="line">let uniqueThree = arr =&gt; &#123;</span><br><span class="line">    let brr = []</span><br><span class="line">    arr.forEach(item =&gt; &#123;</span><br><span class="line">        // 使用indexOf 返回数组是否包含某个值 没有就返回-1 有就返回下标</span><br><span class="line">        if(brr.indexOf(item) === -1) brr.push(item)</span><br><span class="line">        // 或者使用includes 返回数组是否包含某个值 没有就返回false 有就返回true</span><br><span class="line">        if(!brr.includes(item)) brr.push(item)</span><br><span class="line">    &#125;)</span><br><span class="line">    return brr</span><br><span class="line">&#125;</span><br><span class="line">console.log(uniqueThree(arr))</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//方法4</span><br><span class="line">let uniqueFour = arr =&gt; &#123;                                         </span><br><span class="line">     // 使用 filter 返回符合条件的集合</span><br><span class="line">    let brr = arr.filter((item,index) =&gt; &#123;</span><br><span class="line">        return arr.indexOf(item) === index</span><br><span class="line">    &#125;)</span><br><span class="line">    return brr</span><br><span class="line">&#125;</span><br><span class="line">console.log(uniqueFour(arr))</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>常用布局居中</title>
    <link href="http://example.com/2022/03/27/%E5%B8%B8%E7%94%A8%E5%B8%83%E5%B1%80%E5%B1%85%E4%B8%AD/"/>
    <id>http://example.com/2022/03/27/%E5%B8%B8%E7%94%A8%E5%B8%83%E5%B1%80%E5%B1%85%E4%B8%AD/</id>
    <published>2022-03-27T13:19:00.000Z</published>
    <updated>2022-03-27T13:20:50.565Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//利用绝对定位，先将元素的左上角通过 top:50%和 left:50%定位到页面的中心，然后再通过 translate 来调整元素的中心点到页面的中心。该方法需要考虑浏览器兼容问题。</span><br><span class="line">.parent &#123;</span><br><span class="line">    position: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.child &#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    left: 50%;</span><br><span class="line">    top: 50%;</span><br><span class="line">    transform: translate(-50%,-50%);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//利用绝对定位，设置四个方向的值都为 0，并将 margin 设置为 auto，由于宽高固定，因此对应方向实现平分，可以实现水平和垂直方向上的居中。该方法适用于盒子有宽高的情况：</span><br><span class="line">.parent &#123;</span><br><span class="line">    position: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.child &#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    top: 0;</span><br><span class="line">    bottom: 0;</span><br><span class="line">    left: 0;</span><br><span class="line">    right: 0;</span><br><span class="line">    margin: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//利用绝对定位，先将元素的左上角通过 top:50%和 left:50%定位到页面的中心，然后再通过 margin 负值来调整元素的中心点到页面的中心。该方法适用于盒子宽高已知的情况</span><br><span class="line">.parent &#123;</span><br><span class="line">    position: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.child &#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    top: 50%;</span><br><span class="line">    left: 50%;</span><br><span class="line">    margin-top: -50px;     /* 自身 height 的一半 */</span><br><span class="line">    margin-left: -50px;    /* 自身 width 的一半 */</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//使用 flex 布局，通过 align-items:center 和 justify-content:center 设置容器的垂直和水平方向上为居中对齐，然后它的子元素也可以实现垂直和水平的居中。该方法要**考虑兼容的问题**，该方法在移动端用的较多：</span><br><span class="line">.parent &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    justify-content:center;</span><br><span class="line">    align-items:center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//另外，如果父元素设置了flex布局，只需要给子元素加上`margin:auto;`就可以实现垂直居中布局</span><br><span class="line">.parent&#123;</span><br><span class="line">    display:flex;</span><br><span class="line">&#125;</span><br><span class="line">.child&#123;</span><br><span class="line">    margin: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span c</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>在地址栏输入一个地址回车会发生什么</title>
    <link href="http://example.com/2022/03/27/%E5%9C%A8%E5%9C%B0%E5%9D%80%E6%A0%8F%E8%BE%93%E5%85%A5%E4%B8%80%E4%B8%AA%E5%9C%B0%E5%9D%80%E5%9B%9E%E8%BD%A6%E4%BC%9A%E5%8F%91%E7%94%9F%E4%BB%80%E4%B9%88/"/>
    <id>http://example.com/2022/03/27/%E5%9C%A8%E5%9C%B0%E5%9D%80%E6%A0%8F%E8%BE%93%E5%85%A5%E4%B8%80%E4%B8%AA%E5%9C%B0%E5%9D%80%E5%9B%9E%E8%BD%A6%E4%BC%9A%E5%8F%91%E7%94%9F%E4%BB%80%E4%B9%88/</id>
    <published>2022-03-27T13:05:14.000Z</published>
    <updated>2022-03-27T13:06:50.720Z</updated>
    
    <content type="html"><![CDATA[<p>1、解析URL：首先会对 URL 进行解析，分析所需要使用的传输协议和请求的资源的路径。如果输入的 URL 中的协议或者主机名不合法，将会把地址栏中输入的内容传递给搜索引擎。如果没有问题，浏览器会检查 URL 中是否出现了非法字符，如果存在非法字符，则对非法字符进行转义后再进行下一过程。</p><p>2、缓存判断：浏览器会判断所请求的资源是否在缓存里，如果请求的资源在缓存里并且没有失效，那么就直接使用，否则向服务器发起新的请求。</p><p>3、DNS解析： 下一步首先需要获取的是输入的 URL 中的域名的 IP 地址，首先会判断本地是否有该域名的 IP 地址的缓存，如果有则使用，如果没有则向本地 DNS 服务器发起请求。本地 DNS 服务器也会先检查是否存在缓存，如果没有就会先向根域名服务器发起请求，获得负责的顶级域名服务器的地址后，再向顶级域名服务器请求，然后获得负责的权威域名服务器的地址后，再向权威域名服务器发起请求，最终获得域名的 IP 地址后，本地 DNS 服务器再将这个 IP 地址返回给请求的用户。用户向本地 DNS 服务器发起请求属于递归请求，本地 DNS 服务器向各级域名服务器发起请求属于迭代请求。</p><p>4、获取MAC地址： 当浏览器得到 IP 地址后，数据传输还需要知道目的主机 MAC 地址，因为应用层下发数据给传输层，TCP 协议会指定源端口号和目的端口号，然后下发给网络层。网络层会将本机地址作为源地址，获取的 IP 地址作为目的地址。然后将下发给数据链路层，数据链路层的发送需要加入通信双方的 MAC 地址，本机的 MAC 地址作为源 MAC 地址，目的 MAC 地址需要分情况处理。通过将 IP 地址与本机的子网掩码相与，可以判断是否与请求主机在同一个子网里，如果在同一个子网里，可以使用 APR 协议获取到目的主机的 MAC 地址，如果不在一个子网里，那么请求应该转发给网关，由它代为转发，此时同样可以通过 ARP 协议来获取网关的 MAC 地址，此时目的主机的 MAC 地址应该为网关的地址。</p><p>5、TCP三次握手： 下面是 TCP 建立连接的三次握手的过程，首先客户端向服务器发送一个 SYN 连接请求报文段和一个随机序号，服务端接收到请求后向客户端发送一个 SYN ACK报文段，确认连接请求，并且也向客户端发送一个随机序号。客户端接收服务器的确认应答后，进入连接建立的状态，同时向服务器也发送一个ACK 确认报文段，服务器端接收到确认后，也进入连接建立状态，此时双方的连接就建立起来了。</p><p>6、HTTPS握手： 如果使用的是 HTTPS 协议，在通信前还存在 TLS 的一个四次握手的过程。首先由客户端向服务器端发送使用的协议的版本号、一个随机数和可以使用的加密方法。服务器端收到后，确认加密的方法，也向客户端发送一个随机数和自己的数字证书。客户端收到后，首先检查数字证书是否有效，如果有效，则再生成一个随机数，并使用证书中的公钥对随机数加密，然后发送给服务器端，并且还会提供一个前面所有内容的 hash 值供服务器端检验。服务器端接收后，使用自己的私钥对数据解密，同时向客户端发送一个前面所有内容的 hash 值供客户端检验。这个时候双方都有了三个随机数，按照之前所约定的加密方法，使用这三个随机数生成一把秘钥，以后双方通信前，就使用这个秘钥对数据进行加密后再传输。</p><p>7、返回数据： 当页面请求发送到服务器端后，服务器端会返回一个 html 文件作为响应，浏览器接收到响应后，开始对 html 文件进行解析，开始页面的渲染过程。</p><p>8、页面渲染： 浏览器首先会根据 html 文件构建 DOM 树，根据解析到的 css 文件构建 CSSOM 树，如果遇到 script 标签，则判端是否含有 defer 或者 async 属性，要不然 script 的加载和执行会造成页面的渲染的阻塞。当 DOM 树和 CSSOM 树建立好后，根据它们来构建渲染树。渲染树构建好后，会根据渲染树来进行布局。布局完成后，最后使用浏览器的 UI 接口对页面进行绘制。这个时候整个页面就显示出来了。</p><p>9、TCP四次挥手： 最后一步是 TCP 断开连接的四次挥手过程。若客户端认为数据发送完成，则它需要向服务端发送连接释放请求。服务端收到连接释放请求后，会告诉应用层要释放 TCP 链接。然后会发送 ACK 包，并进入 CLOSE_WAIT 状态，此时表明客户端到服务端的连接已经释放，不再接收客户端发的数据了。但是因为 TCP 连接是双向的，所以服务端仍旧可以发送数据给客户端。服务端如果此时还有没发完的数据会继续发送，完毕后会向客户端发送连接释放请求，然后服务端便进入 LAST-ACK 状态。客户端收到释放请求后，向服务端发送确认应答，此时客户端进入 TIME-WAIT 状态。该状态会持续 2MSL（最大段生存期，指报文段在网络中生存的时间，超时会被抛弃） 时间，若该时间段内没有服务端的重发请求的话，就进入 CLOSED 状态。当服务端收到确认应答后，也便进入 CLOSED 状态。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;1、解析URL：首先会对 URL 进行解析，分析所需要使用的传输协议和请求的资源的路径。如果输入的 URL 中的协议或者主机名不合法，将会把地址栏中输入的内容传递给搜索引擎。如果没有问题，浏览器会检查 URL 中是否出现了非法字符，如果存在非法字符，则对非法字符进行转义后再</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>git操作命令</title>
    <link href="http://example.com/2022/03/26/git%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4/"/>
    <id>http://example.com/2022/03/26/git%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4/</id>
    <published>2022-03-26T11:28:07.000Z</published>
    <updated>2022-03-26T11:30:21.290Z</updated>
    
    <content type="html"><![CDATA[<p>git branch 查看本地所有分支<br>git status 查看当前状态<br>git commit 提交<br>git branch -a 查看所有的分支<br>git branch -r 查看远程所有分支<br>git commit -am “init” 提交并且加注释<br>git remote add origin <a href="mailto:&#103;&#x69;&#x74;&#64;&#49;&#57;&#x32;&#x2e;&#49;&#x36;&#x38;&#x2e;&#x31;&#x2e;&#49;&#49;&#x39;">&#103;&#x69;&#x74;&#64;&#49;&#57;&#x32;&#x2e;&#49;&#x36;&#x38;&#x2e;&#x31;&#x2e;&#49;&#49;&#x39;</a>:ndshow<br>git push origin master 将文件给推到服务器上<br>git remote show origin 显示远程库origin里的资源<br>git push origin master:develop<br>git push origin master:hb-dev 将本地库与服务器上的库进行关联<br>git checkout –track origin/dev 切换到远程dev分支<br>git branch -D master develop 删除本地库develop<br>git checkout -b dev 建立一个新的本地分支dev<br>git merge origin/dev 将分支dev与当前分支进行合并<br>git checkout dev 切换到本地dev分支<br>git remote show 查看远程库<br>git add .<br>git rm 文件名(包括路径) 从git中删除指定文件<br>git clone git://github.com/schacon/grit.git 从服务器上将代码给拉下来<br>git config –list 看所有用户<br>git ls-files 看已经被提交的<br>git rm [file name] 删除一个文件<br>git commit -a 提交当前repos的所有的改变<br>git add [file name] 添加一个文件到git index<br>git commit -v 当你用－v参数的时候可以看commit的差异<br>git commit -m “This is the message describing the commit” 添加commit信息<br>git commit -a -a是代表add，把所有的change加到git index里然后再commit<br>git commit -a -v 一般提交命令<br>git log 看你commit的日志<br>git diff 查看尚未暂存的更新<br>git rm a.a 移除文件(从暂存区和工作区中删除)<br>git rm –cached a.a 移除文件(只从暂存区中删除)<br>git commit -m “remove” 移除文件(从Git中删除)<br>git rm -f a.a 强行移除修改后文件(从暂存区和工作区中删除)<br>git diff –cached 或 $ git diff –staged 查看尚未提交的更新<br>git stash push 将文件给push到一个临时空间中<br>git stash pop 将文件从临时空间pop下来</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;git branch 查看本地所有分支&lt;br&gt;git status 查看当前状态&lt;br&gt;git commit 提交&lt;br&gt;git branch -a 查看所有的分支&lt;br&gt;git branch -r 查看远程所有分支&lt;br&gt;git commit -am “init” 提交并</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Vue的生命周期</title>
    <link href="http://example.com/2022/03/25/Vue%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    <id>http://example.com/2022/03/25/Vue%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</id>
    <published>2022-03-25T12:08:34.000Z</published>
    <updated>2022-03-27T13:09:17.782Z</updated>
    
    <content type="html"><![CDATA[<p>Vue 实例有⼀个完整的⽣命周期，也就是从开始创建、初始化数据、编译模版、挂载Dom -&gt; 渲染、更新 -&gt; 渲染、卸载 等⼀系列过程，称这是Vue的⽣命周期。<br>1、beforeCreate（创建前） ：数据观测和初始化事件还未开始，此时 data 的响应式追踪、event/watcher 都还没有被设置，也就是说不能访问到data、computed、watch、methods上的方法和数据。<br>2、created（创建后） ：实例创建完成，实例上配置的 options 包括 data、computed、watch、methods 等都配置完成，但是此时渲染得节点还未挂载到 DOM，所以不能访问到 <code>$el</code> 属性。<br>3、beforeMount（挂载前） ：在挂载开始之前被调用，相关的render函数首次被调用。实例已完成以下的配置：编译模板，把data里面的数据和模板生成html。此时还没有挂载html到页面上。<br>4、mounted（挂载后） ：在el被新创建的 vm.$el 替换，并挂载到实例上去之后调用。实例已完成以下的配置：用上面编译好的html内容替换el属性指向的DOM对象。完成模板中的html渲染到html 页面中。此过程中进行ajax交互。<br>5、beforeUpdate（更新前） ：响应式数据更新时调用，此时虽然响应式数据更新了，但是对应的真实 DOM 还没有被渲染。<br>6、updated（更新后）：在由于数据更改导致的虚拟DOM重新渲染和打补丁之后调用。此时 DOM 已经根据响应式数据的变化更新了。调用时，组件 DOM已经更新，所以可以执行依赖于DOM的操作。然而在大多数情况下，应该避免在此期间更改状态，因为这可能会导致更新无限循环。该钩子在服务器端渲染期间不被调用。<br>7、beforeDestroy（销毁前） ：实例销毁之前调用。这一步，实例仍然完全可用，<code>this</code> 仍能获取到实例。<br>8、destroyed（销毁后） ：实例销毁后调用，调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。该钩子在服务端渲染期间不被调用。<br>另外还有 <code>keep-alive</code> 独有的生命周期，分别为 <code>activated</code> 和 <code>deactivated</code> 。用 <code>keep-alive</code> 包裹的组件在切换时不会进行销毁，而是缓存到内存中并执行 <code>deactivated</code> 钩子函数，命中缓存渲染后会执行 <code>activated</code> 钩子函数。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Vue 实例有⼀个完整的⽣命周期，也就是从开始创建、初始化数据、编译模版、挂载Dom -&amp;gt; 渲染、更新 -&amp;gt; 渲染、卸载 等⼀系列过程，称这是Vue的⽣命周期。&lt;br&gt;1、beforeCreate（创建前） ：数据观测和初始化事件还未开始，此时 data 的响应</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>正则表达式</title>
    <link href="http://example.com/2022/03/22/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://example.com/2022/03/22/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</id>
    <published>2022-03-22T06:37:09.000Z</published>
    <updated>2022-03-22T06:37:58.699Z</updated>
    
    <content type="html"><![CDATA[<p>10个字符,可以是中文,英文,数字,下划线以及一些常用的标点符号比如句号,逗号,感叹号<br>^[\d\w\u4e00-\u9fa5,.;:“‘?!-]{2,10}$</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;10个字符,可以是中文,英文,数字,下划线以及一些常用的标点符号比如句号,逗号,感叹号&lt;br&gt;^[\d\w\u4e00-\u9fa5,.;:“‘?!-]{2,10}$&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>js未定义行为</title>
    <link href="http://example.com/2022/03/21/js%E6%9C%AA%E5%AE%9A%E4%B9%89%E8%A1%8C%E4%B8%BA/"/>
    <id>http://example.com/2022/03/21/js%E6%9C%AA%E5%AE%9A%E4%B9%89%E8%A1%8C%E4%B8%BA/</id>
    <published>2022-03-21T09:41:40.000Z</published>
    <updated>2022-03-21T09:47:14.548Z</updated>
    
    <content type="html"><![CDATA[<p>记录今天遇到的一道”面试官觉得是预编译的”面试题,网上查资料是叫未定义行为,var a开辟了临时作用域,使function a没有提升.<br>function test1(a = 1) {<br>  console.log(a);<br>  var a = 2;<br>  function a() { }<br>}<br>function test2(a = 1) {<br>  console.log(a);<br>  function a() { }<br>}<br>test1() //输出1<br>test2() //输出Function a</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;记录今天遇到的一道”面试官觉得是预编译的”面试题,网上查资料是叫未定义行为,var a开辟了临时作用域,使function a没有提升.&lt;br&gt;function test1(a = 1) {&lt;br&gt;  console.log(a);&lt;br&gt;  var a = 2;&lt;br&gt; </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>vue3语法糖</title>
    <link href="http://example.com/2022/03/21/vue3%E8%AF%AD%E6%B3%95%E7%B3%96/"/>
    <id>http://example.com/2022/03/21/vue3%E8%AF%AD%E6%B3%95%E7%B3%96/</id>
    <published>2022-03-21T05:41:06.000Z</published>
    <updated>2022-03-21T05:41:06.756Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>前端与栈</title>
    <link href="http://example.com/2022/03/21/%E5%89%8D%E7%AB%AF%E4%B8%8E%E6%A0%88/"/>
    <id>http://example.com/2022/03/21/%E5%89%8D%E7%AB%AF%E4%B8%8E%E6%A0%88/</id>
    <published>2022-03-21T02:08:54.000Z</published>
    <updated>2022-03-21T02:08:55.061Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>前端路由模式</title>
    <link href="http://example.com/2022/03/20/%E5%89%8D%E7%AB%AF%E8%B7%AF%E7%94%B1%E6%A8%A1%E5%BC%8F/"/>
    <id>http://example.com/2022/03/20/%E5%89%8D%E7%AB%AF%E8%B7%AF%E7%94%B1%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-03-20T15:16:11.000Z</published>
    <updated>2022-03-20T15:18:31.455Z</updated>
    
    <content type="html"><![CDATA[<p>前端路由库的设计与实现<br>页面的跳转、局部内容的刷新是 Web 应用中使用最多的场景。想象一下，如果我们只刷新了页面的内容，但是 URL 并没有改变，当用户刷新当前页面的时候，原先的内容会丢失，需要重新操作进入到对应的页面中，这是比较糟糕的一种体验。</p><p>所以，我们可以把页面的内容匹配到对应的路由信息中，即使是强制刷新，URL 信息也不会丢，用户依然可以快速恢复原先的页面浏览信息，这也是我们项目中设计和使用路由的很重要的原因。</p><p>单页应用使用了局部刷新的能力，配合路由信息变更的时候进行局部页面内容的刷新（而不是重新加载一个完整的页面），可以让用户获取更好的体验。</p><p>一般来说，前端路由的实现，会包括两种模式：</p><p>History 模式</p><p>Hash 模式</p><p>我们先来看看 History 模式。</p><p>History 模式<br>History 的路由模式，依赖了一个关键的属性window.history，该属性可用来获取用于操作浏览器历史记录的 History 对象。也就是说，通过使用window.history，我们可以实现以下与路由相关的重要能力。比如：</p><p>在 history 中跳转</p><p>使用window.history.back()、window.history.forward()和window.history.go()方法，可以实现在用户历史记录中向后和向前的跳转。</p><p>添加和修改历史记录中的条目</p><p>使用history.pushState()和history.replaceState()方法，它可以操作浏览器的历史栈，同时不会引起页面的刷新（可避免页面重新加载）。</p><p>监听页面路由切换</p><p>当同一个页面在历史记录间切换时，就会产生popstate事件，可以通过window.popstate监听页面路由切换的情况。</p><p>也就是说，使用pushState()和replaceState()来修改路由信息，通过popstate事件监听页面路由变化，来进行页面的局部更新，这便是 History 的路由模式。</p><p>但 History 的路由模式需要依赖 HTML5 History API（IE10 以上），以及服务器的配置来支持，所以也有不少的开发者会使用 Hash 模式来管理 Web 应用的路由。</p><p>那么 Hash 模式又是怎样的呢？</p><p>Hash 模式<br>Hash 模式使用的是从井号(#)开始的 URL（锚）片段，主要依赖 Location 对象的 hash 属性（location.hash）和hashchange事件，包括：</p><p>使用location.hash来设置和获取 hash</p><p>location.hash的设置和获取，并不会造成页面重新加载，利用这一点，我们可以记录页面关键信息的同时，提升页面体验。</p><p>监听hashchange事件</p><p>当页面的 hash 改变时，hashchange事件会被触发，同时提供了两个属性：newURL（当前页面新的 URL）和oldURL（当前页面旧的 URL）。</p><p>部分浏览器不支持onhashchange事件，我们可以自行使用定时器检测和触发的方式来进行兼容，可以使用以下的代码逻辑来实现：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">(function (window) &#123;</span><br><span class="line">  // 如果浏览器原生支持该事件，则退出</span><br><span class="line">  if (&quot;onhashchange&quot; in window.document.body) &#123;</span><br><span class="line">    return;</span><br><span class="line">  &#125;</span><br><span class="line">  var location = window.location,</span><br><span class="line">    oldURL = location.href,</span><br><span class="line">    oldHash = location.hash;</span><br><span class="line">  // 每隔100ms检测一下location.hash是否发生变化</span><br><span class="line">  setInterval(function () &#123;</span><br><span class="line">    var newURL = location.href,</span><br><span class="line">      newHash = location.hash;</span><br><span class="line">    // 如果hash发生了变化，且绑定了处理函数...</span><br><span class="line">    if (newHash != oldHash &amp;&amp; typeof window.onhashchange === &quot;function&quot;) &#123;</span><br><span class="line">      // 执行事件触发</span><br><span class="line">      window.onhashchange(&#123;</span><br><span class="line">        type: &quot;hashchange&quot;,</span><br><span class="line">        oldURL: oldURL,</span><br><span class="line">        newURL: newURL,</span><br><span class="line">      &#125;);</span><br><span class="line">      oldURL = newURL;</span><br><span class="line">      oldHash = newHash;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, 100);</span><br><span class="line">&#125;)(window);</span><br></pre></td></tr></table></figure><p>我们可以看到，Hash 路由模式使用location.hash来设置和获取 hash，并通过window.onhashchange监听基于 hash 的路由变化，来进行页面更新处理的。</p><p>路由结合前端框架<br>不管是 History 模式还是 Hash 模式，路由的实现原理都很简单，因此一般来说大家也都会直接使用前端框架自带的路由库。</p><p>路由库结合前端框架的工作流程是这样的：</p><p>设置监听器，监听popstate或者hashchange事件；</p><p>根据当前 URL 信息匹配设置的路径，根据路由设置加载对应模块，通过前端框架进行更新和渲染；</p><p>页面更新的同时，使用location.hash或者history.pushState/replaceState更新页面的路由信息。</p><p>以上是简单的实现，很多路由工具库还会提供除事件监听和通知之外的一些更高级的能力，比如与渲染层结合解析和处理的能力，以及路由的钩子、路由监听、路由鉴权、匹配和映射、懒加载打包等这种能力，减轻业务开发过程中的处理工作。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;前端路由库的设计与实现&lt;br&gt;页面的跳转、局部内容的刷新是 Web 应用中使用最多的场景。想象一下，如果我们只刷新了页面的内容，但是 URL 并没有改变，当用户刷新当前页面的时候，原先的内容会丢失，需要重新操作进入到对应的页面中，这是比较糟糕的一种体验。&lt;/p&gt;
&lt;p&gt;所以</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>浏览器渲染</title>
    <link href="http://example.com/2022/03/20/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93/"/>
    <id>http://example.com/2022/03/20/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93/</id>
    <published>2022-03-20T14:16:41.000Z</published>
    <updated>2022-03-20T15:23:50.135Z</updated>
    
    <content type="html"><![CDATA[<p>浏览器的内部结构<br>从结构上来说，浏览器主要包括了八个子系统：用户界面、浏览器引擎、渲染引擎、网络子系统、JavaScript 解释器、XML 解析器、显示后端、数据持久性子系统。</p><p><img src="/2022/03/20/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BB%93%E6%9E%84.png" alt="浏览器结构"></p><p>这些子系统组合构成了我们的浏览器。页面的加载和渲染过程，离不开网络子系统、渲染引擎、JavaScript 解释器和浏览器引擎。</p><p>以前端开发最常使用的 Chrome 浏览器为例， Chrome 浏览器是使用多进程架构的方式来管理这些子系统。</p><p>Chrome 多进程架构<br>Chrome 浏览器采用的多进程架构，主要包括四个进程：</p><p>浏览器进程：选项卡之外的所有内容都由浏览器进程处理，浏览器进程则主要用于控制和处理用户可见的 UI 部分（包括地址栏，书签，后退和前进按钮）和用户不可见的隐藏部分（例如网络请求和文件访问）。</p><p>GPU 进程：该进程用于完成图像处理任务，同时还支持分解成多个进程进行处理。</p><p>渲染器进程：Chrome 浏览器中支持多个选项卡，其中每个选项卡在单独的渲染器进程中运行，渲染器进程主要用于控制和处理选项卡中的网站内容显示。</p><p>插件进程：管理 Chrome 浏览器中的各个插件。</p><p>对于“在浏览器的地址栏中输入 URL，按下回车键，到浏览器渲染页面”这个过程，浏览器内部会通过浏览器进程和渲染器进程，进行很多交互逻辑，最终才得以将页面内容显示在屏幕上。</p><p>其中，浏览器进程和渲染器进程同样支持多线程，包括以下这些线程。</p><p><img src="/2022/03/20/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%BF%9B%E7%A8%8B.png" alt="浏览器进程"></p><p><img src="/2022/03/20/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93/%E6%B8%B2%E6%9F%93%E5%99%A8.png" alt="渲染器"></p><p>这些线程其实并不陌生，在前面介绍的内容中有提到，比如：</p><p>在页面的加载过程中，涉及 GUI 渲染线程与 JavaScript 引擎线程间的互斥关系，因此页面中的**”script”**元素设计不合理会影响页面加载速度；</p><p>在 UI 线程、网络线程、存储线程、浏览器事件触发线程、浏览器定时器触发线程中，I/O 事件通过异步任务完成时触发的函数回调，解决了单线程的 Javascript 阻塞问题。</p><p>下面我们再来看下 Chrome 浏览器中页面的渲染过程，包括浏览器进程和线程如何通信来显示页面。</p><p>浏览器中页面的渲染过程<br>首先我们将浏览器中页面的渲染过程分为两部分。</p><p>页面导航：用户输入 URL，浏览器进程进行请求和准备处理。</p><p>页面渲染：获取到相关资源后，渲染器进程负责选项卡内部的渲染处理。</p><ol><li>页面导航过程<br>当用户在地址栏中输入内容时，浏览器内部会进行以下处理。</li></ol><p>首先浏览器进程的 UI 线程会进行处理：如果是 URI，则会发起网络请求来获取网站内容；如果不是，则进入搜索引擎。</p><p>如果需要发起网络请求，请求过程由网络线程来完成。HTTP 请求响应如果是 HTML 文件，则将数据传递到渲染器进程；如果是其他文件则意味着这是下载请求，此时会将数据传递到下载管理器。</p><p>如果请求响应为 HTML 内容，此时浏览器应导航到请求站点，网络线程便通知 UI 线程数据准备就绪。</p><p>接下来，UI 线程会寻找一个渲染器进程来进行网页渲染。当数据和渲染器进程都准备好后，HTML 数据通过 IPC 从浏览器进程传递到渲染器进程中。</p><p>渲染器进程接收 HTML 数据后，将开始加载资源并渲染页面。</p><p>渲染器进程完成渲染后，通过 IPC 通知浏览器进程页面已加载。</p><p>以上是用户在地址栏输入网站地址，到页面开始渲染的整体过程。为了方便理解，我帮你梳理了一个流程图：</p><p><img src="/2022/03/20/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93/%E8%AF%A6%E7%BB%86%E6%B8%B2%E6%9F%93%E8%BF%87%E7%A8%8B.png" alt="详细渲染过程"></p><p>如果当前页面跳转到其他网站，浏览器将调用一个单独的渲染进程来处理新导航，同时保留当前渲染进程来处理像unload这类事件。</p><p>在上面的过程中可以看到，页面导航主要依赖浏览器进程。其中，上述过程中的步骤 5 便是页面的渲染部分，该过程同样依赖渲染器进程，我们一起来看看。</p><ol start="2"><li>页面渲染过程<br>前面说过，渲染器进程负责选项卡内部发生的所有事情，它的核心工作是将 HTML、CSS 和 JavaScript 转换为可交互的页面。</li></ol><p>整体上，渲染器进程渲染页面的流程基本如下。</p><p>解析(Parser)：解析 HTML/CSS/JavaScript 代码。</p><p>布局(Layout)：定位坐标和大小、是否换行、各种position/overflow/z-index属性等计算。</p><p>绘制(Paint)：判断元素渲染层级顺序。</p><p>光栅化(Raster)：将计算后的信息转换为屏幕上的像素。</p><p>大致流程如下图：</p><p><img src="/2022/03/20/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93/%E6%B8%B2%E6%9F%93%E8%BF%87%E7%A8%8B.png" alt="渲染过程"></p><p>我们来分别看下。</p><ol><li>解析。</li></ol><p>渲染器进程的主线程会解析以下内容：</p><p>解析 HTML 内容，产生一个 DOM 节点树；</p><p>解析 CSS，产生 CSS 规则树；</p><p>解析 Javascript 脚本，由于 Javascript 脚本可以通过 DOM API 和 CSSOM API 来操作 DOM 节点树和 CSS 规则树，因此该过程中会等待 JavaScript 运行完成才继续解析 HTML。</p><p>解析完成后，我们得到了 DOM 节点树和 CSS 规则树，布局过程便是通过 DOM 节点树和 CSS 规则树来构造渲染树（Render Tree）。</p><ol start="2"><li>布局。</li></ol><p>通过解析之后，渲染器进程知道每个节点的结构和样式，但如果需要渲染页面，浏览器还需要进行布局，布局过程便是我们常说的渲染树的创建过程。</p><p>在这个过程中，像header或display:none的元素，它们会存在 DOM 节点树中，但不会被添加到渲染树里。</p><p>布局完成后，将会进入绘制环节。</p><ol start="3"><li>绘制</li></ol><p>在绘制步骤中，渲染器主线程会遍历渲染树来创建绘制记录。</p><p>需要注意的是，如果渲染树发生了改变，则渲染器会触发重绘（Repaint）和重排（Reflow）。</p><p>重绘：屏幕的一部分要重画，比如某个 CSS 的背景色变了，但是元素的几何尺寸没有变。</p><p>重排：元素的几何尺寸变了（渲染树的一部分或全部发生了变化），需要重新验证并计算渲染树。</p><p>为了不对每个小的变化都进行完整的布局计算，渲染器会将更改的元素和它的子元素进行脏位标记，表示该元素需要重新布局。其中，全局样式更改会触发全局布局，部分样式或元素更改会触发增量布局，增量布局是异步完成的，全局布局则会同步触发。</p><p>重排需要涉及变更的所有的结点几何尺寸和位置，成本比重绘的成本高得多的多。所以我们要注意以避免频繁地进行增加、删除、修改 DOM 结点、移动 DOM 的位置、Resize 窗口、滚动等操作，因为这些操作可能会导致性能降低。</p><ol start="4"><li>光栅化</li></ol><p>通过解析、布局和绘制过程，浏览器获得了文档的结构、每个元素的样式、绘制顺序等信息。将这些信息转换为屏幕上的像素，这个过程被称为光栅化。</p><p>光栅化可以被 GPU 加速，光栅化后的位图会被存储在 GPU 内存中。根据前面介绍的渲染流程，当页面布局变更了会触发重排和重绘，还需要重新进行光栅化。此时如果页面中有动画，则主线程中过多的计算任务很可能会影响动画的性能。</p><p>因此，现代的浏览器通常使用合成的方式，将页面的各个部分分成若干层，分别对其进行栅格化（将它们分割成了不同的瓦片），并通过合成器线程进行页面的合成。</p><p>合成过程如下：</p><p>当主线程创建了合成层并确定了绘制顺序，便将这些信息提交给合成线程；</p><p>合成器线程将每个图层栅格化，然后将每个图块发送给光栅线程；</p><p>光栅线程栅格化每个瓦片，并将它们存储在 GPU 内存中；</p><p>合成器线程通过 IPC 提交给浏览器进程，这些合成器帧被发送到 GPU 进程处理，并显示在屏幕上。</p><p>合成的真正目的是，在移动合成层的时候不用重新光栅化。因为有了合成器线程，页面才可以独立于主线程进行流畅的滚动。</p><p>到这里，页面才真正渲染到屏幕上。</p><p>我们在绘制页面的时候，也可能会遇到很多奇怪的渲染问题，比如使用了transform:scale可能会导致某些浏览器中渲染模糊，究其原因则是由于光栅化过程导致的。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;浏览器的内部结构&lt;br&gt;从结构上来说，浏览器主要包括了八个子系统：用户界面、浏览器引擎、渲染引擎、网络子系统、JavaScript 解释器、XML 解析器、显示后端、数据持久性子系统。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2022/03/20/%E6%B5%8F%E8%A7</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>网络请求过程</title>
    <link href="http://example.com/2022/03/20/%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82%E8%BF%87%E7%A8%8B/"/>
    <id>http://example.com/2022/03/20/%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82%E8%BF%87%E7%A8%8B/</id>
    <published>2022-03-20T13:22:13.000Z</published>
    <updated>2022-03-20T14:13:20.489Z</updated>
    
    <content type="html"><![CDATA[<h4 id="页面的请求过程"><a href="#页面的请求过程" class="headerlink" title="页面的请求过程"></a><strong>页面的请求过程</strong></h4><p>​        当我们打开某个网站的页面，浏览器就会发起网络请求获取该页面的资源，我们也可以从控制台看到以下的请求信息：</p><p><img src="/2022/03/20/%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82%E8%BF%87%E7%A8%8B/network.PNG" alt="network"></p><p><img src="/2022/03/20/%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82%E8%BF%87%E7%A8%8B/innetwork.PNG" alt="innetwork"></p><p>​        在 Network 面板里，我们能看到所有浏览器发起的网络请求，包括页面、图片、CSS 文件、XHR 请求等，还能看到请求的状态（200 成功、404 找不到、缓存、重定向等等）、耗时、请求头和内容、返回头和内容等。</p><p>​        图中第一个就是网站页面的请求，返回<html>页面。</html></p><p>​        接下来，浏览器会加载页面，同时页面中涉及的外部资源也会根据需要，在特定的时机触发请求下载，包括我们看到的 PNG 图片、JavaScript 文件（这里没有 CSS 样式，是因为样式被直出在<html>页面内容里了）。</html></p><p>​        回到前面的问题，实际上当我们在浏览器输入网页地址，按下回车键后，浏览器的处理过程如下：</p><p>​            –&gt;DNS 域名解析（此处涉及 DNS 的寻址过程），找到网页的存放服务器；</p><p>​            –&gt;浏览器与服务器建立 TCP 连接；</p><p>​            –&gt;浏览器发起 HTTP 请求；</p><p>​            –&gt;服务器响应 HTTP 请求，返回该页面的 HTML 内容；</p><p>​            –&gt;浏览器解析 HTML 代码，并请求 HTML 代码中的资源（如 JavaScript、CSS、图片等，此处可能涉及 HTTP 缓存）；</p><p>​            –&gt;浏览器对页面进行渲染呈现给用户（此处涉及浏览器的渲染原理）。</p><p>首先我们来看 DNS 解析过程。</p><h4 id="DNS-解析"><a href="#DNS-解析" class="headerlink" title="DNS 解析"></a>DNS 解析</h4><p>​        DNS 的全称是 Domain Name System，又称域名系统，它负责把<a href="http://www.qq.com这样的域名地址翻译成一个/">www.qq.com这样的域名地址翻译成一个</a> IP（比如14.18.180.206），而客户端与服务器建立 TCP 连接需要通过 IP 通信。</p><p>​        让客户端和服务器连接并不是靠域名进行，在网络中每个终端之间实现连接和通信是通过一个唯一的 IP 地址来完成。在建立 TCP 连接前，我们需要找到建立连接的服务器，DNS 的解析过程可以让用户通过域名找到存放文件的服务器。</p><p>​        DNS 解析过程会进行递归查询，分别依次尝试从以下途径，按顺序地获取该域名对应的 IP 地址。</p><p>​            –&gt;浏览器缓存</p><p>​            –&gt;系统缓存（用户操作系统 Hosts 文件 DNS 缓存）</p><p>​            –&gt;路由器缓存</p><p>​            –&gt;互联网服务提供商 DNS 缓存（联通、移动、电信等互联网服务提供商的 DNS 缓存服务器）</p><p>​            –&gt;根域名服务器</p><p>​            –&gt;顶级域名服务器</p><p>​            –&gt;主域名服务器</p><p>​        DNS 解析过程会根据上述步骤进行递归查询，如果当前步骤没查到，则自动跳转到到下一步骤通过下一个 DNS 服务器进行查找。如果最终依然没找到，浏览器便会将页面响应为打开失败。</p><p>​        除此之外，我们在前后端联调过程中也常常需要配置 HOST，这个过程便是修改了浏览器缓存或是系统缓存。通过将特定域名指向我们自身的服务器 IP 地址，便可以实现通过域名访问本地环境、测试环境、预发布环境的服务器资源。</p><p>那为什么需要配置域名 HOST，而不直接使用 IP 地址进行访问呢？这是因为浏览器的同源策略会导致跨域问题。</p><p>​        同源策略要求，只有当请求的协议、域名和端口都相同的情况下，我们才可以访问当前页面的 Cookie/LocalStorage/IndexDB、获取和操作 DOM 节点，以及发送 Ajax 请求。通过同源策略的限制，可以避免恶意的攻击者盗取用户信息，从而可以保证用户信息的安全。</p><p>​        对于非同源的请求，我们常常称为跨域请求，需要进行跨域处理。常见的跨域解决方案有这几种。</p><p>​            –&gt;使用document.domain + iframe：只有在主域相同的时候才能使用该方法。</p><p>​            –&gt;动态创建 script(JSONP)：通过指定回调函数以及函数的传参数据，让页面执行相应的脚本内容。</p><p>​            –&gt;使用location.hash + iframe：利用location.hash来进行传值。</p><p>​            –&gt;使用window.name + iframe：原理是window.name值在不同的页面（甚至不同域名）加载后依旧存在。</p><p>​            –&gt;使用window.postMessage()实现跨域通信。</p><p>​            –&gt;使用跨域资源共享 CORS（Cross-origin resource sharing）。</p><p>​            –&gt;使用 Websockets。</p><p>​        其中，CORS 作为现在的主流解决方案，它允许浏览器向跨源服务器，发出 XMLHttpRequest 请求，从而克服了 Ajax 只能同源使用的限制。实现 CORS 通信的关键是服务器，只要服务端实现了 CORS 接口，就可以进行跨源通信。</p><p>​        DNS 解析完成后，浏览器获得了服务端的 IP 地址，接下来便可以向服务端发起 HTTP 请求。目前大多数 HTTP 请求都建立在 TCP 连接上，因此客户端和服务端会先建立起 TCP 连接。</p><h4 id="TCP-连接的建立"><a href="#TCP-连接的建立" class="headerlink" title="TCP 连接的建立"></a>TCP 连接的建立</h4><p>​        TCP 连接的建立过程比较偏通信底层，在前端日常开发过程中不容易接触到。但有时候我们需要优化应用的加载耗时、请求耗时或是定位一些偏底层的问题（请求异常、HTTP 连接无法建立等），都会或多或少依赖这些偏底层的知识。</p><p>​            TCP 协议提供可靠传输服务，UDP 协议则可以更快地进行通信；</p><p>​            三次握手：指 TCP 连接的建立过程，该过程中客户端和服务端总共需要发送三个包，从而确认连接存在。</p><p>​            四次挥手：指 TCP 连接的断开过程，该过程中需要客户端和服务端总共发送四个包以，从而确认连接关闭。</p><p>​        当客户端和服务端建立起 TCP 连接之后，HTTP 服务器会监听客户端发起的请求，此时客户端会发起 HTTP 请求。</p><h4 id="HTTP-请求与-TCP-协议"><a href="#HTTP-请求与-TCP-协议" class="headerlink" title="HTTP 请求与 TCP 协议"></a>HTTP 请求与 TCP 协议</h4><p>​        由客户端发起的 HTTP 请求，服务器收到后会进行回复，回复内容通常包括 HTTP 状态、响应消息等，更具体的会在下一讲 HTTP 协议中进行介绍。</p><p>​        前面说过，目前大多数 HTTP 请求都是基于 TCP 协议。TCP 协议的目的是提供可靠的数据传输，它用来确保可靠传输的途径主要包括两个：</p><p>​            乱序重建：通过对数据包编号来对其排序，从而使得另一端接收数据时，可以重新根据编号还原顺序。</p><p>​            丢包重试：可通过发送方是否得到响应，来检测出丢失的数据并重传这些数据。</p><p>​        通过以上方式，TCP 在传输过程中不会丢失或破坏任何数据，这也是即使出现网络故障也不会损坏文件下载的原因。</p><p>​        因此，目前大多数 HTTP 连接基于 TCP 协议。不过，在 HTTP/3 中底层支撑是 QUIC 协议，该协议使用的是 UDP 协议。因为 UDP 协议丢弃了 TCP 协议中所有的错误检查内容，因此可以更快地进行通信，更常用于直播和在线游戏的应用。</p><p>​        也就是说，HTTP/3 基于 UDP 协议实现了数据的快速传输，同时通过 QUIC 协议保证了数据的可靠传输，最终实现了又快又可靠的通信。</p><p>​        除了以上的内容，其实我们还可以去了解关于 TCP/IP 协议的分层模型、IP 寻址过程，以及 IP 协议又是如何将数据包准确无误地传递这些内容，也需要关注 HTTP/2、HTTP/3、HTTPS 这些协议的设计变更了什么、又解决了什么。</p><p>​        或许这些内容对于大多数前端开发来说，都很少会直接接触。但它就像乘法口诀在高考数学题中的角色，基本上所有题目中都会使用到，但我们很少会认为自己是因为掌握了乘法口诀才能顺利解答题目。</p><p>​        同样的，我们对网络请求的认知也常常忽略了底层 TCP/IP 知识，基本上围绕着“前端发起了请求，后台就能收到”“请求没有按预期结果返回，要么是请求包内容有误，要么后台服务异常”这样的理解去进行处理。</p><p>​        但如果某一天，我们的应用整体请求耗时突然变长，这个过程中前端和后台都没有时间上能关联的发布单，我们到底应该如何进行定位呢？如果我们对一个网络请求的完整流程不够了解，又怎么定位到底是哪个步骤出现问题了呢？甚至我们都不会想到，将 HTTP 切换到 HTTPS 也可能会影响到请求耗时。</p><p>​        下面，我们就来看一下 HTTP 请求在前端开发过程中是如何进行编程实现的，这就不得不提到 Ajax 请求了。</p><h4 id="Ajax-请求"><a href="#Ajax-请求" class="headerlink" title="Ajax 请求"></a>Ajax 请求</h4><p>​        Ajax 请求这个词会频繁出现在我们的工作对话内容中，但它并不是 JavaScript 的规范，而是 Jesse James Garrett 提出的新术语：Asynchronous JavaScript and XML，意思是用 JavaScript 执行异步网络请求。</p><h4 id="网络请求的发展"><a href="#网络请求的发展" class="headerlink" title="网络请求的发展"></a>网络请求的发展</h4><p>​        对于浏览器来说，网络请求是用来从服务端获取需要的信息，然后解析协议和内容，来进行页面渲染或者是信息获取的过程。</p><p>​        在很久以前，我们的网络请求除了静态资源（HTML/CSS/JavaScript 等）文件的获取，主要用于表单的提交。我们在完成表单内容的填写之后，点击提交按钮，接下来表单开始提交，浏览器就会刷新页面，然后在新页面里告诉你操作是成功了还是失败了。</p><p>​        除了页面跳转刷新会影响用户体验，在表单提交过程中，使用同步请求会阻塞进程。此时用户无法继续操作页面，导致页面呈现假死状态，使得用户体验变得糟糕。</p><p>​        为了避免这种情况，我们开始使用异步请求 + 回调的方式，来进行请求处理，这就是 Ajax。</p><p>​        随着时间发展，Ajax 的应用越来越广，如今使用 Ajax 已经是前端开发的基本操作。但 Ajax 是一种解决方案，在前端中的具体实现依赖使用XMLHttpRequest相关 API。页面开始支持局部更新、动态加载，甚至还有懒加载、首屏加载等等，都是以XMLHttpRequest为前提。</p><h4 id="XMLHttpRequest"><a href="#XMLHttpRequest" class="headerlink" title="XMLHttpRequest"></a>XMLHttpRequest</h4><p>​        XMLHttpRequest让发送一个 HTTP 请求变得非常容易，我们只需要简单的创建一个请求对象实例，并对它进行操作：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">var request = new XMLHttpRequest(); // 新建XMLHttpRequest对象</span><br><span class="line"></span><br><span class="line">request.onreadystatechange = function () &#123;</span><br><span class="line">  // 状态发生变化时，函数被回调</span><br><span class="line">  if (request.readyState == 4) &#123;</span><br><span class="line">    // 成功完成</span><br><span class="line">    // 判断响应结果:</span><br><span class="line">    if (request.status == 200) &#123;</span><br><span class="line">      // 成功，通过responseText拿到响应的文本</span><br><span class="line">      console.log(request.responseText);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      // 失败，根据响应码判断失败原因:</span><br><span class="line">      console.log(request.status);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 发送请求</span><br><span class="line">// open的参数：</span><br><span class="line">// 一：请求方法，包括get/post等</span><br><span class="line">// 二：请求地址</span><br><span class="line">// 三：表示是否异步请求，若为false则是同步请求，会阻塞进程</span><br><span class="line">request.open(&quot;GET&quot;, &quot;/api/categories&quot;, true);</span><br><span class="line">request.send();</span><br></pre></td></tr></table></figure><p>​        上面是处理一个 HTTP 请求的方法。我们通常会将它封装成一个通用的方法，方便调用。上面例子中我们根据返回的request.status 是否为200来判断是否成功，但实际上200-400（不包括400）的范围，都可以算是成功的，因为其中还包括使用缓存、重定向等情况。</p><p>​        我们将其封装起来，同时使用 ES6 的Promise的方式，我们可以将其变成一个通过Peomise进行异步回调的请求函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">function Ajax(&#123; method, url, params, contentType &#125;) &#123;</span><br><span class="line">  const xhr = new XMLHttpRequest();</span><br><span class="line">  const formData = new FormData();</span><br><span class="line">  Object.keys(params).forEach((key) =&gt; &#123;</span><br><span class="line">    formData.append(key, params[key]);</span><br><span class="line">  &#125;);</span><br><span class="line">  return new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">      xhr.open(method, url, false);</span><br><span class="line">      xhr.setRequestHeader(&quot;Content-Type&quot;, contentType);</span><br><span class="line">      xhr.onreadystatechange = function () &#123;</span><br><span class="line">        if (xhr.readyState === 4) &#123;</span><br><span class="line">          if (xhr.status &gt;= 200 &amp;&amp; xhr.status &lt; 400) &#123;</span><br><span class="line">            // 这里我们使用200-400来判断</span><br><span class="line">            resolve(xhr.responseText);</span><br><span class="line">          &#125; else &#123;</span><br><span class="line">            // 返回请求信息</span><br><span class="line">            reject(xhr);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">      xhr.send(formData);</span><br><span class="line">    &#125; catch (err) &#123;</span><br><span class="line">      reject(err);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        通过这样简单的封装，我们就可以以 Promise 的方式来发起 Ajax 请求。</p><p>​        但在具体的项目使用过程中，我们通常还需要考虑更多的问题，比如防抖节流、失败重试、缓存能力、浏览器兼容性、参数处理等。</p><p>​        这就是 HTTP 请求的编程实现。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;页面的请求过程&quot;&gt;&lt;a href=&quot;#页面的请求过程&quot; class=&quot;headerlink&quot; title=&quot;页面的请求过程&quot;&gt;&lt;/a&gt;&lt;strong&gt;页面的请求过程&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;​        当我们打开某个网站的页面，浏览器就会发起网络请求</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>HTTP</title>
    <link href="http://example.com/2022/03/19/HTTP/"/>
    <id>http://example.com/2022/03/19/HTTP/</id>
    <published>2022-03-19T01:34:35.000Z</published>
    <updated>2022-03-20T13:40:29.169Z</updated>
    
    <content type="html"><![CDATA[<p>网络请求的过程，当服务端建立起与客户端的 TCP 连接之后，<strong>服务端会持续监听客户端发起的请求</strong>。接下来，客户端将发起 HTTP 请求，请求内容通常包括请求方法、请求的资源等，服务端收到请求后会进行回复，回复内容通常包括 HTTP 状态、响应消息等。</p><p>可以看到，网络请求的过程包括两个步骤：客户端发送请求，服务器返回响应。这就是 HTTP 协议的主要特点：遵循经典的“<strong>客户端-服务端</strong>”模型。</p><p>除此之外，HTTP 协议还被设计得简单易读。在 HTTP/2 之前，HTTP 协议是语义可读的，我们可以直观地获取其中的内容。比如：</p><p><strong>HTTP 请求方法</strong>：代表着客户端的动作行为（GET-获取资源/POST-提交资源/PUT-修改资源/DELETE-删除资源）。</p><p><strong>HTTP 状态码</strong>：代表着当前请求的状态（1XX-提示信息/2XX-成功/3XX-重定向/4XX-客户端错误/5XX-服务端错误）。</p><p><strong>HTTP 消息头</strong>：客户端和服务端通过 request 和 response 传递附加信息。</p><p>通过 HTTP 协议，我们可以看到该请求是否成功、错误原因是哪些、请求是否使用了缓存、请求和响应数据是否符合预期等。</p><p>前面我们说到，<strong>HTTP 协议在 HTTP/2 之前是语义可读的</strong>，那么 HTTP/2 之后发生了什么呢？</p><h4 id="HTTP-协议的演变"><a href="#HTTP-协议的演变" class="headerlink" title="HTTP 协议的演变"></a><strong>HTTP 协议的演变</strong></h4><p>HTTP 协议从被创造以来，一直在不断演变着：从 HTTP/1.0、HTTP/1.1，到 HTTP/2、HTTP/3，HTTP 协议在保持协议简单性的同时，拓展了灵活性，提供越来越快、更加可靠的传输服务。</p><p><strong>HTTP/1.0 到 HTTP/1.1</strong>，主要实现了对 TCP 连接的复用。 最初在 HTTP/1.0 中，每一对 HTTP 请求和响应都需要打开一个单独的 TCP 连接。这样的方式对资源消耗很大，因此 HTTP/1.1 中引入了持久连接的概念，通过设置 Connection 头部为 keep-alive 的方式，可以让 TCP 连接不会关闭。该功能避免了 TCP 连接的重新建立，客户端可在已建立的 TCP 连接上，长时间地对同一个服务端的发起请求。</p><p><strong>HTTP/1.1 到 HTTP/2</strong>，主要实现了多个请求的复用。 HTTP/2 通过将 HTTP 消息拆分为独立的帧，进行交错发送，实现在同一个连接上并行多个请求，来减少网络请求的延迟。为了实现多路复用，HTTP/2 协议对 HTTP 头部进行了二进制编码，因此不再语义可读。除此之外，HTTP2 还实现了 Header 压缩、服务端主动推动、流优先级等能力。</p><p><strong>HTTP/2 到 HTTP/3</strong>，主要实现了基于 UDP 协议、更快的传输。 HTTP/3 使用了基于 UDP 的 QUIC 协议，实现了又快又可靠的传输。由于 UDP 协议中没有错误检查内容，因此可以更快地实现通信。同时，QUIC 协议负责合并纠错、重建丢失的数据，解决了 UDP 协议传输丢包的问题。</p><p>总的来说，HTTP 协议的演变过程主要围绕着传输效率和速度上的优化，我们可以通过升级 HTTP 协议来优化前端应用。除此之外，我们在日常的工作中，同样可以借鉴 HTTP 协议的优化手段。比如，可以使用资源压缩、资源复用等技术手段，来优化前端性能。</p><hr><h4 id="HTTP-Cookie"><a href="#HTTP-Cookie" class="headerlink" title="HTTP Cookie"></a><strong>HTTP Cookie</strong></h4><p>HTTP 协议是无状态的，这意味着在同一个 TCP 连接中，先后发起的请求之间没有任何关系。这给服务端带来了挑战：用户在同一个网站中进行连续的操作，服务端无法知道这些操作来自哪里。</p><p>HTTP Cookie 可以解决这个问题。当服务端将 HTTP 响应返回给客户端时，通过在响应头里面添加一个 Set-Cookie 信息，浏览器收到带 Set-Cookie 信息的响应后会将 Cookie 保存，在后面发送给该服务端的每个请求中，都会自动带上 Cookie 信息。服务端根据 Cookie 信息，就能取得客户端的数据信息。</p><p>但由于 Cookie 信息是被浏览器识别并自动保存和发送的，因此在默认情况下，浏览器关闭之后它就会被自动删除。但我们也可以通过指定过期时间（Expires）或者有效期（Max-Age），来让 Cookie 获得更久的有效期。</p><p><font color="red"> <em>需要注意的是 : 某个网站在设置了 Cookie 之后，所有符合条件（有效期、域名、路径、适用站点等）的请求都会被自动带上 Cookie。这带来了一个 Web 安全隐患：服务端只知道请求来自某个用户的浏览器，却不知道请求本身是否用户自愿发出的。</em></font></p><p>利用这一漏洞，攻击者可通过一些技术手段（图片地址、超链接等）欺骗用户的浏览器访问曾经认证过的网站，并利用用户的登录态进行一些操作，可能导致用户信息泄露、资产被转移、在不知情的情况下发送信息等，带来了恶劣的后果。这便是我们常说的 Web 安全问题之一：<font color="red">跨站请求伪造（CSRF） </font>。</p><p>为了应对这种情况，我们可以校验 HTTP 请求头中的 Referer 字段，这个字段用以标明请求来源于哪个地址。但由于该字段可能会被篡改，因此只能作为辅助校验手段。</p><p>防范跨站请求伪造攻击的有效方法，就是避免依赖浏览器自动带上的 Cookie 信息。我们可以使用其他方式校验用户登录态，比如将用户登录态保存在浏览器缓存中，在发送请求的时候添加用于标识用户的参数值，现在大多数应用也是<strong>使用 Token 来进行用户标识</strong>。</p><p>除了 HTTP Cookie 之外，浏览器中 HTTP 缓存机制也同样依赖 HTTP 协议。</p><h4 id="HTTP-缓存"><a href="#HTTP-缓存" class="headerlink" title="HTTP 缓存"></a><strong>HTTP 缓存</strong></h4><p>缓存常常被用作性能优化的技术方案之一，通过缓存我们可以有效地减少资源获取的耗时，减少用户的等待时长，从而提升用户的体验。</p><p>其中，我们可以通过 HTTP 协议，设置浏览器对 HTTP 响应资源进行缓存。使用浏览器缓存后，当我们再发起 HTTP 请求时，如果浏览器缓存发现请求的资源已经被存储，它会拦截请求并返回该资源的副本，不需要再去请求服务端获取资源，因此减少了 HTTP 请求的耗时，同时也能有效地缓解服务端压力。</p><p>一般来说，HTTP 缓存只能存储 GET 请求的响应内容，对于这些响应内容可能会存在两种情况：</p><p>1.不缓存内容，每次请求的时候都会从服务端获取最新的内容；</p><p>2.设置了缓存内容，则在有效期内会从缓存获取，如果用户刷新或内容过期则去服务端获取最新的内容。</p><p>那么，要如何给 GET 请求设置缓存呢？在浏览器中，便是依靠请求和响应中的头信息来控制缓存的。根据缓存的行为，我们可以将它们分为强制缓存和协商缓存两种。</p><p><strong>强制缓存</strong>， 在规定有效期内，直接使用缓存。可以通过以下的方式使用强制缓存：</p><p>服务端通过设置 Expires 和 Cache-Control，和客户端约定缓存内容的有效时间；</p><p>若符合缓存条件，浏览器响应 HTTP 200(from cache)。</p><p><strong>协商缓存</strong>， 与服务端协商是否使用缓存。可以通过以下的方式使用协商缓存：</p><p>服务端通过设置 If-Modified-Since 和 If-None-Match，和客户端约定标识协商缓存的值；</p><p>当有效期过后，浏览器将缓存信息中的 Etag 和 Last-Modified 信息，分别使用 If-None-Match 和 If-Modified-Since 请求头设置，提交给服务端。</p><p>若符合缓存条件，服务端则响应 HTTP 304，浏览器将从缓存读数据。</p><p>若以上缓存条件均不符合，服务端响应 HTTP 200，返回更新后的数据，同时通过响应头更新 HTTP 缓存设置。整个过程可以用下面的流程图来表示：<br><img src="/2022/03/19/HTTP/HttpCache.png" alt="HttpCache"></p><p>浏览器会在第一次请求完服务端后得到响应，通过适当地设置响应头信息，我们可以使用更多的缓存资源，从而提升网站的响应速度和性能，给到用户更好的体验。</p><p>除了常见的 Cookie 和 GET 请求的缓存，客户端和服务端在实现双向通信的时候，同样会依赖 HTTP 协议来完成。</p><p>客户端服务端双向通信<br>客户端和服务端的通信方式有很多种，大多数场景下都是由客户端主动发送数据给服务端，但在特定的场景下（如多人协作、在线游戏）客户端还需要和服务端保持实时通信，此时需要使用双向通信。</p><p>常见的双向通信方式包括 HTTP 短轮询（polling）、HTTP 长轮询（long-polling）、XHR Streaming、Server-Sent Events、Websocket 等。</p><p>其中，最简单粗暴的莫过于 HTTP 短轮询，客户端每隔特定的时间（比如 1s）便向服务端发起请求，获取最新的资源信息。该方式会造成较多的资源浪费，尤其当服务端内容更新频率低于轮询间隔时，就会造成服务端资源、客户端资源的浪费。除此之外，过于频繁的请求也会给服务端造成额外的压力，当服务端负载较高的时候，甚至可能导致雪崩等情况发生。</p><p>HTTP 长轮询解决了短轮询的一些问题，长轮询实现特点主要为当客户端向服务端发起请求后，服务端保持住连接，当数据更新响应之后才断开连接。然后客户端会重新建立连接，并继续等待新数据。此技术的主要问题在于，在重新连接过程中，页面上的数据可能会过时且不准确。</p><p>相比 HTTP 长轮询，XHR Streaming 可以维护客户端和服务端之间的连接。但使用 XHR Streaming 过程中，XMLHttpRequest 对象的数量将不断增长，因此在使用过程中需要定期关闭连接，来清除缓冲区。</p><p>SSE（Server-Sent Events）方案思想便是 XHR Streaming，主要基于浏览器中 EventSourceAPI 的封装和协议。它会对 HTTP 服务开启一个持久化的连接，以 text/event-stream 格式发送事件， 会一直保持开启直到被要求关闭。</p><p>最后我们来介绍 WebSocket，它实现了浏览器与服务端全双工通信。前面我们提到，HTTP 短轮询、长轮询都会带来额外的资源浪费，因此 Websocket 在实现实时通信的同时，能更好地节省服务端资源和带宽。</p><p>Websoctet 是如何实现全双工通信的呢？Websocket 建立在 TCP 协议之上，握手阶段采用 HTTP 协议，但这个 HTTP 协议的请求头中，有以下的标识性内容。</p><p>Connection: Upgrade、Upgrade: websocket：表示这个连接将要被转换为 WebSocket 连接。</p><p>Sec-WebSocket-Key：向服务端提供所需的信息，以确认客户端有权请求升级到 WebSocket。</p><p>Sec-WebSocket-Protocol：指定一个或多个的 WebSocket 协议。</p><p>Sec-WebSocket-Version：指定 WebSocket 的协议版本。</p><p>如果服务端同意启动 WebSocket 连接，会在握手过程中的 HTTP 协议中返回包含 Sec-WebSocket-Accept 的响应消息，接下来客户端和服务端便建立 WebSocket 连接，并通过 WebSocket 协议传输数据。</p><p>由于不再需要通过 HTTP 协议通信，省去请求头等内容设置，Websocket 数据格式会更加轻量，通信更加高效，性能开销也相应地降低。除此之外，不同于 HTTP 协议，Websocket 协议没有同源限制，因此客户端可以与任意服务端通信。<br><img src="/2022/03/19/HTTP/Httpcom.png" alt="Httpcom"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;网络请求的过程，当服务端建立起与客户端的 TCP 连接之后，&lt;strong&gt;服务端会持续监听客户端发起的请求&lt;/strong&gt;。接下来，客户端将发起 HTTP 请求，请求内容通常包括请求方法、请求的资源等，服务端收到请求后会进行回复，回复内容通常包括 HTTP 状态、响应消</summary>
      
    
    
    
    <category term="网络请求" scheme="http://example.com/categories/%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82/"/>
    
    
    <category term="HTTP" scheme="http://example.com/tags/HTTP/"/>
    
    <category term="缓存" scheme="http://example.com/tags/%E7%BC%93%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>Axios</title>
    <link href="http://example.com/2022/03/17/Axios/"/>
    <id>http://example.com/2022/03/17/Axios/</id>
    <published>2022-03-17T05:07:10.000Z</published>
    <updated>2022-03-20T14:01:23.531Z</updated>
    
    <content type="html"><![CDATA[<p>​ 请求拦截器 request</p><p>​ 响应拦截器 response</p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//创建实例</span><br><span class="line">const service = axios.create(&#123;</span><br><span class="line">baseURL://基准地址</span><br><span class="line">timeout: 5000//超时时间</span><br><span class="line">&#125;)</span><br><span class="line">service.interceptors.request.use()</span><br><span class="line"></span><br><span class="line">service.interceptors.response.use()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;​ 请求拦截器 request&lt;/p&gt;
&lt;p&gt;​ 响应拦截器 response&lt;/p&gt;</summary>
    
    
    
    <category term="网络请求" scheme="http://example.com/categories/%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82/"/>
    
    
  </entry>
  
  <entry>
    <title>DOM</title>
    <link href="http://example.com/2022/03/17/DOM/"/>
    <id>http://example.com/2022/03/17/DOM/</id>
    <published>2022-03-17T05:07:10.000Z</published>
    <updated>2022-03-20T13:16:38.872Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><p>​ 递归遍历 dom 树</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">function domshu(arr,ele)&#123;</span><br><span class="line">for(let i =0;i&lt;ele.children.length;i++)&#123;</span><br><span class="line">arr.push(ele.children[i])</span><br><span class="line">domshu(arr,ele.children[i])</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">let box = document.querySelector(&#x27;.box&#x27;)</span><br><span class="line">let arr = []</span><br><span class="line">domshu(arr,box)</span><br></pre></td></tr></table></figure><p>​ 渲染 dom 树</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function addElement(arr,fatherDom)&#123;</span><br><span class="line">for(let i =0;i&lt;arr.length;i++)&#123;</span><br><span class="line">let div = domcument.createElement(&#x27;div&#x27;)</span><br><span class="line">div.inneHTML = `&lt;p&gt; $&#123; arr[i].type || arr[i] &#125; &lt;/p&gt;`</span><br><span class="line">fatherDom.appendChild(div)</span><br><span class="line">if(arr[i].type)&#123;</span><br><span class="line">addElement(arr[i].data,div)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">addElement(arr,document.querySelector(&#x27;.menu&#x27;)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;p&gt;​ 递归遍历 dom 树&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/sp</summary>
      
    
    
    
    <category term="JavaScript" scheme="http://example.com/categories/JavaScript/"/>
    
    
    <category term="DOM" scheme="http://example.com/tags/DOM/"/>
    
  </entry>
  
  <entry>
    <title>ES5对比ES6</title>
    <link href="http://example.com/2022/03/17/ES5%20%E5%AF%B9%E6%AF%94%20ES6/"/>
    <id>http://example.com/2022/03/17/ES5%20%E5%AF%B9%E6%AF%94%20ES6/</id>
    <published>2022-03-17T05:07:10.000Z</published>
    <updated>2022-03-17T17:48:40.367Z</updated>
    
    <content type="html"><![CDATA[<p>​ var let 与 const</p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">console.log(num)//undefined,不会报错</span><br><span class="line">var num =10</span><br><span class="line">console.log(num)//10</span><br><span class="line"></span><br><span class="line">if(1)&#123; var num =10 &#125;</span><br><span class="line">for(var i=1; i&lt;5; i++)&#123; &#125;</span><br><span class="line"></span><br><span class="line">ES6没有预解析,得先声明才能使用,否则报错</span><br><span class="line">有块级作用域,if和for大括号里面声明的变量是局部变量</span><br><span class="line">const定义引用类型变量时,不可以改堆地址,但可以改堆里的数据</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>解构赋值:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">1.对象属性赋值给变量</span><br><span class="line">ES5</span><br><span class="line">let obj =&#123; name:&#x27;张三&#x27;,age:&#x27;18&#x27;&#125;</span><br><span class="line">let name = obj.name</span><br><span class="line">let age = obj.age</span><br><span class="line">ES6</span><br><span class="line">let &#123;name,age&#125; = obj</span><br><span class="line">注意:</span><br><span class="line">let&#123; age= 10 &#125; =obj 相当 let age = obj.age || 10   //10设为默认值</span><br><span class="line">2.变量赋值给对象属性</span><br><span class="line">ES5</span><br><span class="line">let username = admin</span><br><span class="line">let password = password</span><br><span class="line">let user = &#123;</span><br><span class="line">username:username,</span><br><span class="line">password:password</span><br><span class="line">&#125;</span><br><span class="line">ES6</span><br><span class="line">let username = admin</span><br><span class="line">let password = password</span><br><span class="line">let user = &#123;</span><br><span class="line">//前提是属性名和变量名一样</span><br><span class="line">username,</span><br><span class="line">password</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">3.数组解构</span><br><span class="line">let arr = [&#x27;张三&#x27;,20]</span><br><span class="line">let&#123;name,age&#125; = arr//按下标依次赋值</span><br><span class="line">4.函数参数解构</span><br><span class="line">function fn ( &#123;name,age&#125; )&#123;</span><br><span class="line">let &#123;name ,age&#125;= obj</span><br><span class="line">&#125;</span><br><span class="line">注意:fn(1)//无法解构基础类型</span><br><span class="line"></span><br><span class="line">fn( &#123;name:&#x27;张三&#x27;,age:18&#125; )</span><br><span class="line"></span><br><span class="line">原理:let obj = &#123;name:&#x27;张三&#x27;,age:18&#125;</span><br><span class="line"> let &#123;name,age&#125; = obj</span><br><span class="line">由上可得 let &#123;name,age&#125; = &#123;name:&#x27;张三&#x27;,age:18&#125;</span><br></pre></td></tr></table></figure><p>箭头函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">箭头函数中的this:谁声明我,我就指向谁(箭头函数没有this)</span><br><span class="line">0级链是全局作用域</span><br><span class="line">对象没有局部作用域,对象的方法是一级链</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;​ var let 与 const&lt;/p&gt;</summary>
    
    
    
    <category term="JavaScript" scheme="http://example.com/categories/JavaScript/"/>
    
    
  </entry>
  
  <entry>
    <title>vue存在的问题</title>
    <link href="http://example.com/2022/03/17/VUE%E5%AD%98%E5%9C%A8%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://example.com/2022/03/17/VUE%E5%AD%98%E5%9C%A8%E7%9A%84%E9%97%AE%E9%A2%98/</id>
    <published>2022-03-17T05:07:10.000Z</published>
    <updated>2022-03-17T17:49:05.743Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><p>​ 1.vue 插值表达式闪动问题</p><p>​ 原因: vue 先渲染插值表达式,在替换,这样会在卡顿时形成闪动</p><p>​ 解决: 使用 v-cloak 指令</p><p>​ v-cloak 指令的用法:</p><p>​ 1.提供样式[v-cloak]{ display:none; }</p><p>​ 2.在插值表达式所在的标签中添加 v-cloak 指令</p><p>​ 原理: 先通过样式隐藏内容,然后再内存中进行值的替换,替换好之后再显示最后的结果</p><p>​ 最优解: 使用 v-text 指令</p>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;p&gt;​ 1.vue 插值表达式闪动问题&lt;/p&gt;
&lt;p&gt;​ 原因: vue 先渲染插值表达式,在替换,这样会在卡顿时形成闪动&lt;/p&gt;
&lt;p&gt;​ 解决: 使用 v-cloak 指令&lt;/p&gt;
&lt;p&gt;​ v-cloak 指令的用法:&lt;/</summary>
      
    
    
    
    <category term="疑难点" scheme="http://example.com/categories/%E7%96%91%E9%9A%BE%E7%82%B9/"/>
    
    
  </entry>
  
  <entry>
    <title>vue目录</title>
    <link href="http://example.com/2022/03/17/VUE%E7%9B%AE%E5%BD%95/"/>
    <id>http://example.com/2022/03/17/VUE%E7%9B%AE%E5%BD%95/</id>
    <published>2022-03-17T05:07:10.000Z</published>
    <updated>2022-03-17T17:44:54.498Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><p>vue 入口文件 main.js</p><p>​ new Vue(Vue 实例)</p><p>​ 挂载路由</p><p>​ 挂载 vuex</p><p>​ 全局注册 element</p><p>​ App.Vue 根页面组件</p><p>​ router-view</p><p>​ layout 布局组件 login 404</p><p>​ navbar</p><p>​ siderbar router-view</p><hr><p>​ permission.js</p><hr><p>​ setting</p><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;p&gt;vue 入口文件 main.js&lt;/p&gt;
&lt;p&gt;​ new Vue(Vue 实例)&lt;/p&gt;
&lt;p&gt;​ 挂载路由&lt;/p&gt;
&lt;p&gt;​ 挂载 vuex&lt;/p&gt;
&lt;p&gt;​ 全局注册 element&lt;/p&gt;
&lt;p&gt;​ App.Vue </summary>
      
    
    
    
    <category term="VUE" scheme="http://example.com/categories/VUE/"/>
    
    
  </entry>
  
  <entry>
    <title>Element Ui 表单校验</title>
    <link href="http://example.com/2022/03/17/e-%E8%A1%A8%E5%8D%95%E6%A0%A1%E9%AA%8C/"/>
    <id>http://example.com/2022/03/17/e-%E8%A1%A8%E5%8D%95%E6%A0%A1%E9%AA%8C/</id>
    <published>2022-03-17T05:07:10.000Z</published>
    <updated>2022-03-17T06:24:26.120Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Element-Ui-表单校验"><a href="#Element-Ui-表单校验" class="headerlink" title="Element Ui 表单校验"></a>Element Ui 表单校验</h3><span id="more"></span><p>​ :model=”” :rules=””</p><p>​ prop=””</p><p>​ ref=”” v-model=””</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-form :model=&quot;&quot; :rules=&quot;&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;el-form-item prop=&quot;&quot;&gt;</span><br><span class="line">&lt;el-form-item/&gt;</span><br><span class="line"></span><br><span class="line">&lt;el-input v-model=&quot;&quot;&gt;</span><br><span class="line">&lt;el-input/&gt;</span><br><span class="line"></span><br><span class="line">&lt;el-form/&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">key:[&#123;</span><br><span class="line"></span><br><span class="line">required:true,</span><br><span class="line"></span><br><span class="line">message:&#x27;不能为空错误提示&#x27;,</span><br><span class="line"></span><br><span class="line">trigger:change/blur&#125;,</span><br><span class="line"></span><br><span class="line">  &#123;trigger:change/blur</span><br><span class="line"></span><br><span class="line">    message:&#x27;正则校验错误提示&#x27;</span><br><span class="line"></span><br><span class="line">    pattern:正则表达式&#125;,</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">trigger:change/blur,</span><br><span class="line"></span><br><span class="line">validator:自定义函数</span><br><span class="line"></span><br><span class="line">&#125;]</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>key(字段名) required(字符必填) message(不能为空)</p><p>change/blur(值改变/失去焦点) validator(自定义校验)</p><hr><p>​ 自定义校验</p><p>​ const checkMobile =functioon(rule,value,callback){</p><p>​ ture callback</p><p>​ Flase callback(new Error(“错误提示”))</p><p>​ }</p><hr><p>​ native</p><p>注册原生事件,而不是使用 el 暴露的事件</p><p>​</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;Element-Ui-表单校验&quot;&gt;&lt;a href=&quot;#Element-Ui-表单校验&quot; class=&quot;headerlink&quot; title=&quot;Element Ui 表单校验&quot;&gt;&lt;/a&gt;Element Ui 表单校验&lt;/h3&gt;</summary>
    
    
    
    
  </entry>
  
</feed>
